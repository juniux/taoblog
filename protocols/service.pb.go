// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocols/service.proto

package protocols

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_763b5d403f427316, []int{0}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PingResponse struct {
	Pong                 string   `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()         { *m = PingResponse{} }
func (m *PingResponse) String() string { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()    {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_763b5d403f427316, []int{1}
}

func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResponse.Unmarshal(m, b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return xxx_messageInfo_PingResponse.Size(m)
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetPong() string {
	if m != nil {
		return m.Pong
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "protocols.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "protocols.PingResponse")
}

func init() { proto.RegisterFile("protocols/service.proto", fileDescriptor_763b5d403f427316) }

var fileDescriptor_763b5d403f427316 = []byte{
	// 878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb5, 0xa8, 0x6a, 0xc9, 0x90, 0xd0, 0x76, 0x9a, 0x34, 0x61, 0x28, 0xb1, 0xb5, 0x54,
	0x01, 0x99, 0xd6, 0x2b, 0xb9, 0x70, 0x89, 0x04, 0xd5, 0x26, 0x95, 0xaa, 0x48, 0x1c, 0xaa, 0x86,
	0x5e, 0xe0, 0x50, 0xad, 0xdd, 0xd1, 0xb2, 0xc2, 0xde, 0xd9, 0x7a, 0xc6, 0xe1, 0x80, 0x40, 0x51,
	0x15, 0x64, 0x1b, 0x5a, 0x6c, 0x6d, 0x54, 0x43, 0x53, 0x20, 0xb5, 0x84, 0x52, 0x24, 0x4a, 0x6c,
	0x21, 0x44, 0x91, 0x6b, 0xc4, 0x99, 0x33, 0x7f, 0x02, 0x9d, 0xb5, 0x73, 0xca, 0x99, 0x1b, 0xda,
	0x1f, 0xb3, 0xde, 0xb5, 0x9d, 0xd0, 0xdb, 0xfa, 0xbd, 0xe7, 0xf7, 0xfd, 0xbc, 0x5f, 0x03, 0x66,
	0xad, 0x22, 0x61, 0x24, 0x47, 0xf2, 0x54, 0xa1, 0xb8, 0xb8, 0x66, 0xe4, 0x70, 0xda, 0xb3, 0xc0,
	0x89, 0xd0, 0x81, 0x4e, 0x0f, 0x62, 0xb2, 0x5a, 0xee, 0xa3, 0x92, 0xe5, 0x87, 0xa0, 0xe9, 0x81,
	0xdd, 0x22, 0x94, 0x05, 0xd6, 0x48, 0xc6, 0x1c, 0x29, 0x14, 0xb0, 0x29, 0x1c, 0x67, 0x74, 0x42,
	0xf4, 0x3c, 0x56, 0x34, 0xcb, 0x50, 0x34, 0xd3, 0x24, 0x4c, 0x63, 0x06, 0x31, 0x69, 0xe0, 0x3d,
	0xe7, 0xff, 0xed, 0xbc, 0x8e, 0xcd, 0xf3, 0xf4, 0x63, 0x4d, 0xd7, 0x71, 0x51, 0x21, 0x96, 0x17,
	0x31, 0x1a, 0x2d, 0x4f, 0x81, 0x17, 0xae, 0x18, 0xa6, 0x7e, 0x15, 0xdf, 0x2c, 0x61, 0xca, 0x64,
	0x19, 0x4c, 0xfa, 0x3f, 0xa9, 0x45, 0x4c, 0x8a, 0x21, 0x04, 0x47, 0x2c, 0x62, 0xea, 0x73, 0x52,
	0x52, 0x7a, 0x7d, 0xe2, 0xaa, 0xf7, 0x9d, 0xf9, 0x77, 0x12, 0x1c, 0x7b, 0x4f, 0x23, 0x4b, 0x79,
	0xa2, 0xc3, 0xeb, 0xe0, 0x88, 0x1b, 0x0f, 0x4f, 0xa7, 0x43, 0xd8, 0x74, 0x24, 0x1f, 0x9a, 0x1d,
	0xb1, 0xfb, 0x89, 0xe5, 0x05, 0x5b, 0x3d, 0x85, 0x4e, 0xba, 0xa6, 0xa4, 0xf3, 0xed, 0x1d, 0xfe,
	0x45, 0x93, 0xdf, 0xfb, 0xf1, 0x9f, 0xf5, 0x5b, 0xb7, 0xfe, 0x7e, 0xba, 0xf9, 0x1c, 0x80, 0xcf,
	0x2b, 0x6b, 0x17, 0x14, 0xcb, 0x4d, 0xcc, 0xc0, 0xd1, 0x25, 0xaf, 0x55, 0x70, 0x2e, 0x92, 0xca,
	0x37, 0x09, 0x91, 0x97, 0xc6, 0x78, 0x02, 0x99, 0xb7, 0x6c, 0x35, 0x89, 0xe6, 0x79, 0xab, 0xcb,
	0xcb, 0x1d, 0xe7, 0x6e, 0xdb, 0xb9, 0xb3, 0xcb, 0x3b, 0x9b, 0xfb, 0xdd, 0x8a, 0xf3, 0x65, 0xc3,
	0xfb, 0xa8, 0x0a, 0xcd, 0x49, 0x08, 0x5c, 0x4d, 0x7f, 0x2c, 0xf0, 0x03, 0x00, 0x96, 0x8b, 0x58,
	0x63, 0xf8, 0x0a, 0xa1, 0x0c, 0x1e, 0x8f, 0x16, 0x41, 0x28, 0x43, 0xc3, 0x06, 0xf9, 0x0d, 0x5b,
	0x9d, 0x46, 0x90, 0x57, 0xee, 0xf3, 0x27, 0x1d, 0xa7, 0xd1, 0x76, 0x1a, 0xe5, 0xde, 0x4f, 0x0f,
	0x44, 0xea, 0x17, 0xe5, 0x09, 0xaf, 0x1c, 0x42, 0x19, 0x5d, 0x94, 0x52, 0xd0, 0x00, 0xc7, 0x2e,
	0x63, 0xe6, 0x65, 0x8e, 0x92, 0x07, 0x36, 0x51, 0xd4, 0x88, 0x46, 0xc6, 0x56, 0x67, 0xd1, 0x4c,
	0xff, 0xab, 0xc7, 0xbc, 0xd6, 0x70, 0xb6, 0xeb, 0xbd, 0x56, 0x39, 0x2e, 0x03, 0xe1, 0x89, 0x50,
	0x46, 0xf9, 0xc4, 0xb8, 0xf1, 0x76, 0xea, 0x53, 0x78, 0x13, 0x80, 0x6b, 0xd6, 0x0d, 0x51, 0xc7,
	0x99, 0x48, 0xca, 0x81, 0xf9, 0x40, 0xc1, 0x37, 0x6d, 0xf5, 0x24, 0x3a, 0xee, 0xdc, 0xff, 0x75,
	0xa4, 0x22, 0x94, 0x99, 0x89, 0x48, 0x79, 0x2b, 0xeb, 0xe9, 0xb9, 0xd5, 0x6d, 0x4a, 0x60, 0x6a,
	0xd5, 0x2f, 0x65, 0x95, 0x69, 0xac, 0x44, 0x61, 0x22, 0x92, 0x38, 0xe6, 0x11, 0xca, 0xc9, 0x83,
	0x03, 0x82, 0x31, 0x5e, 0xf4, 0x6a, 0x77, 0xbe, 0x69, 0xf1, 0xfa, 0x0e, 0xff, 0xfc, 0x11, 0xef,
	0xae, 0xc7, 0x81, 0x12, 0x32, 0x1a, 0xae, 0x7d, 0x91, 0xe2, 0x20, 0x8b, 0x4b, 0xf5, 0x19, 0x00,
	0x97, 0x31, 0x5b, 0xf6, 0xcf, 0x28, 0xd6, 0x88, 0x81, 0x59, 0xe0, 0xc0, 0x88, 0x37, 0x70, 0xc9,
	0xef, 0x78, 0x7b, 0x14, 0x34, 0xff, 0x76, 0x99, 0xef, 0x6e, 0xf5, 0xba, 0x0d, 0x5e, 0x7b, 0xdc,
	0xdb, 0xda, 0xe8, 0xb7, 0x36, 0xfa, 0xbb, 0x1d, 0x41, 0x32, 0x03, 0x4f, 0xb9, 0x24, 0xc1, 0xc1,
	0x86, 0x83, 0xa8, 0x49, 0x60, 0xca, 0x6f, 0xb9, 0x60, 0x48, 0x8c, 0x0c, 0xe3, 0x19, 0x30, 0x56,
	0x3c, 0x8c, 0x60, 0x24, 0x87, 0x61, 0x24, 0x33, 0x2f, 0xc7, 0x31, 0xc4, 0x0b, 0x12, 0xce, 0xa9,
	0x2a, 0x81, 0xa9, 0x4b, 0x38, 0x8f, 0xc7, 0x13, 0xc5, 0x3c, 0xe3, 0xe6, 0x34, 0x14, 0x30, 0x38,
	0xb7, 0x59, 0x34, 0xc3, 0x2b, 0x0f, 0xf6, 0xee, 0xfd, 0xe0, 0x6c, 0xd7, 0x9d, 0xef, 0x9a, 0x43,
	0xdd, 0x49, 0x8d, 0xed, 0xce, 0x8e, 0x04, 0x26, 0xdf, 0x35, 0xa8, 0x18, 0x04, 0x85, 0xf3, 0x11,
	0xa5, 0xa8, 0x43, 0x90, 0x24, 0x0e, 0xf4, 0x07, 0x20, 0xd7, 0x6c, 0xf5, 0x1c, 0x4a, 0xf9, 0xf3,
	0x72, 0xcf, 0x3d, 0x72, 0x2f, 0xbd, 0xad, 0x8d, 0xfd, 0x6e, 0xd5, 0xe7, 0xe2, 0x95, 0xaf, 0xfb,
	0xcd, 0xf0, 0xdd, 0x49, 0xc2, 0xf9, 0xa1, 0xb5, 0xbe, 0xee, 0xf1, 0x85, 0xbc, 0xf0, 0x2f, 0x09,
	0x9c, 0x58, 0x0d, 0x17, 0xc6, 0x5d, 0xd4, 0x95, 0x4b, 0x50, 0x8e, 0xaf, 0x6f, 0xcc, 0x29, 0x80,
	0x5f, 0x3d, 0x34, 0x26, 0x80, 0xce, 0xdb, 0xaa, 0x8a, 0x2e, 0xf6, 0xff, 0x78, 0xd4, 0x7b, 0xf8,
	0xc4, 0xd9, 0xae, 0xef, 0x35, 0x7f, 0xeb, 0x75, 0x1e, 0xfa, 0xa0, 0xfb, 0xdd, 0x4a, 0xff, 0xcf,
	0xef, 0x79, 0xfd, 0x36, 0xff, 0xb9, 0x2e, 0x2c, 0x55, 0x5e, 0x69, 0xf3, 0xda, 0xce, 0xd3, 0xdf,
	0xd7, 0x47, 0xde, 0x02, 0x59, 0x7e, 0x65, 0x4c, 0x9f, 0xdd, 0x93, 0xf0, 0x25, 0xdd, 0x05, 0xf8,
	0x45, 0x02, 0xd3, 0xc1, 0x9b, 0x23, 0xda, 0xb7, 0x4c, 0x4a, 0x26, 0x83, 0x0b, 0xa3, 0x8f, 0x52,
	0x2c, 0x40, 0xd4, 0xf4, 0xda, 0xff, 0xc6, 0x05, 0x75, 0xad, 0xd8, 0x2a, 0x42, 0x73, 0xc1, 0xf1,
	0x78, 0x9c, 0x7e, 0x09, 0xce, 0xdd, 0xb6, 0x00, 0x5e, 0x80, 0x67, 0x0f, 0x6f, 0xfd, 0x62, 0xce,
	0x4d, 0xb9, 0x74, 0xf6, 0x7d, 0x59, 0x37, 0xd8, 0x87, 0xa5, 0x6c, 0x3a, 0x47, 0x0a, 0x4a, 0x81,
	0xac, 0xd1, 0xac, 0xc2, 0x34, 0x92, 0xcd, 0x13, 0x5d, 0x09, 0x69, 0xb2, 0x47, 0xbd, 0xcf, 0x0b,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x25, 0xda, 0x5b, 0x94, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaoBlogClient is the client API for TaoBlog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaoBlogClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Post, error)
	SetPostStatus(ctx context.Context, in *SetPostStatusRequest, opts ...grpc.CallOption) (*SetPostStatusResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
	SetCommentPostID(ctx context.Context, in *SetCommentPostIDRequest, opts ...grpc.CallOption) (*SetCommentPostIDResponse, error)
	GetPostCommentsCount(ctx context.Context, in *GetPostCommentsCountRequest, opts ...grpc.CallOption) (*GetPostCommentsCountResponse, error)
}

type taoBlogClient struct {
	cc *grpc.ClientConn
}

func NewTaoBlogClient(cc *grpc.ClientConn) TaoBlogClient {
	return &taoBlogClient{cc}
}

func (c *taoBlogClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) SetPostStatus(ctx context.Context, in *SetPostStatusRequest, opts ...grpc.CallOption) (*SetPostStatusResponse, error) {
	out := new(SetPostStatusResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/SetPostStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/DeleteComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) SetCommentPostID(ctx context.Context, in *SetCommentPostIDRequest, opts ...grpc.CallOption) (*SetCommentPostIDResponse, error) {
	out := new(SetCommentPostIDResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/SetCommentPostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) GetPostCommentsCount(ctx context.Context, in *GetPostCommentsCountRequest, opts ...grpc.CallOption) (*GetPostCommentsCountResponse, error) {
	out := new(GetPostCommentsCountResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/GetPostCommentsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaoBlogServer is the server API for TaoBlog service.
type TaoBlogServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	CreatePost(context.Context, *Post) (*Post, error)
	GetPost(context.Context, *GetPostRequest) (*Post, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*Post, error)
	SetPostStatus(context.Context, *SetPostStatusRequest) (*SetPostStatusResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*Comment, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
	SetCommentPostID(context.Context, *SetCommentPostIDRequest) (*SetCommentPostIDResponse, error)
	GetPostCommentsCount(context.Context, *GetPostCommentsCountRequest) (*GetPostCommentsCountResponse, error)
}

// UnimplementedTaoBlogServer can be embedded to have forward compatible implementations.
type UnimplementedTaoBlogServer struct {
}

func (*UnimplementedTaoBlogServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTaoBlogServer) Backup(ctx context.Context, req *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedTaoBlogServer) CreatePost(ctx context.Context, req *Post) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (*UnimplementedTaoBlogServer) GetPost(ctx context.Context, req *GetPostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (*UnimplementedTaoBlogServer) UpdatePost(ctx context.Context, req *UpdatePostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (*UnimplementedTaoBlogServer) SetPostStatus(ctx context.Context, req *SetPostStatusRequest) (*SetPostStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPostStatus not implemented")
}
func (*UnimplementedTaoBlogServer) GetComment(ctx context.Context, req *GetCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (*UnimplementedTaoBlogServer) UpdateComment(ctx context.Context, req *UpdateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (*UnimplementedTaoBlogServer) DeleteComment(ctx context.Context, req *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (*UnimplementedTaoBlogServer) ListComments(ctx context.Context, req *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}
func (*UnimplementedTaoBlogServer) SetCommentPostID(ctx context.Context, req *SetCommentPostIDRequest) (*SetCommentPostIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommentPostID not implemented")
}
func (*UnimplementedTaoBlogServer) GetPostCommentsCount(ctx context.Context, req *GetPostCommentsCountRequest) (*GetPostCommentsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostCommentsCount not implemented")
}

func RegisterTaoBlogServer(s *grpc.Server, srv TaoBlogServer) {
	s.RegisterService(&_TaoBlog_serviceDesc, srv)
}

func _TaoBlog_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_SetPostStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPostStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).SetPostStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/SetPostStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).SetPostStatus(ctx, req.(*SetPostStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_SetCommentPostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCommentPostIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).SetCommentPostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/SetCommentPostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).SetCommentPostID(ctx, req.(*SetCommentPostIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_GetPostCommentsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostCommentsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).GetPostCommentsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/GetPostCommentsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).GetPostCommentsCount(ctx, req.(*GetPostCommentsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaoBlog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.TaoBlog",
	HandlerType: (*TaoBlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TaoBlog_Ping_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _TaoBlog_Backup_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _TaoBlog_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _TaoBlog_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _TaoBlog_UpdatePost_Handler,
		},
		{
			MethodName: "SetPostStatus",
			Handler:    _TaoBlog_SetPostStatus_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _TaoBlog_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _TaoBlog_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _TaoBlog_DeleteComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _TaoBlog_ListComments_Handler,
		},
		{
			MethodName: "SetCommentPostID",
			Handler:    _TaoBlog_SetCommentPostID_Handler,
		},
		{
			MethodName: "GetPostCommentsCount",
			Handler:    _TaoBlog_GetPostCommentsCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols/service.proto",
}
