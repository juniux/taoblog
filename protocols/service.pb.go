// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocols/service.proto

package protocols

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("protocols/service.proto", fileDescriptor_763b5d403f427316) }

var fileDescriptor_763b5d403f427316 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0x29, 0xd6, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x8b,
	0x08, 0x71, 0xc2, 0x25, 0xa4, 0xc4, 0x10, 0x6a, 0x92, 0x12, 0x93, 0xb3, 0x4b, 0x0b, 0x20, 0x4a,
	0xa4, 0x90, 0xf4, 0x26, 0xe7, 0xe7, 0xe6, 0xa6, 0xe6, 0x95, 0x40, 0x24, 0x8c, 0xe6, 0x33, 0x71,
	0xb1, 0x87, 0x24, 0xe6, 0x3b, 0xe5, 0xe4, 0xa7, 0x0b, 0xd9, 0x72, 0xb1, 0x39, 0x81, 0x35, 0x09,
	0x49, 0xe8, 0xc1, 0xd5, 0xeb, 0x41, 0x84, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa4, 0x24,
	0xb1, 0xc8, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0xd9, 0x71, 0x71, 0xb9, 0xa7, 0x96, 0x38,
	0x43, 0x8c, 0x17, 0x92, 0x41, 0x52, 0x88, 0x10, 0x86, 0x19, 0x23, 0x84, 0x24, 0x0b, 0xd3, 0xe1,
	0xc2, 0xc5, 0x1b, 0x5a, 0x90, 0x92, 0x58, 0x92, 0x0a, 0x13, 0x90, 0x47, 0x52, 0x84, 0x22, 0x83,
	0xcf, 0x14, 0x7f, 0x2e, 0x1e, 0x9f, 0xcc, 0x62, 0x98, 0x7d, 0xc5, 0x42, 0x72, 0x48, 0x6a, 0x90,
	0x25, 0x60, 0x66, 0xc8, 0xe3, 0x94, 0x87, 0x78, 0xcb, 0x49, 0x25, 0x4a, 0x29, 0x3d, 0xb3, 0x24,
	0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x37, 0xbf, 0xac, 0x38, 0x49, 0xbf, 0x24, 0x31,
	0x3f, 0x29, 0x27, 0x3f, 0x5d, 0x1f, 0xae, 0x35, 0x89, 0x0d, 0xcc, 0x34, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xe1, 0x25, 0xcc, 0x33, 0xa5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaoBlogClient is the client API for TaoBlog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaoBlogClient interface {
	// Backup
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error)
	ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error)
}

type taoBlogClient struct {
	cc *grpc.ClientConn
}

func NewTaoBlogClient(cc *grpc.ClientConn) TaoBlogClient {
	return &taoBlogClient{cc}
}

func (c *taoBlogClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/GetComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/UpdateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoBlogClient) ListComments(ctx context.Context, in *ListCommentsRequest, opts ...grpc.CallOption) (*ListCommentsResponse, error) {
	out := new(ListCommentsResponse)
	err := c.cc.Invoke(ctx, "/protocols.TaoBlog/ListComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaoBlogServer is the server API for TaoBlog service.
type TaoBlogServer interface {
	// Backup
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*Comment, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*Comment, error)
	ListComments(context.Context, *ListCommentsRequest) (*ListCommentsResponse, error)
}

// UnimplementedTaoBlogServer can be embedded to have forward compatible implementations.
type UnimplementedTaoBlogServer struct {
}

func (*UnimplementedTaoBlogServer) Backup(ctx context.Context, req *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (*UnimplementedTaoBlogServer) GetComment(ctx context.Context, req *GetCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (*UnimplementedTaoBlogServer) UpdateComment(ctx context.Context, req *UpdateCommentRequest) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (*UnimplementedTaoBlogServer) ListComments(ctx context.Context, req *ListCommentsRequest) (*ListCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComments not implemented")
}

func RegisterTaoBlogServer(s *grpc.Server, srv TaoBlogServer) {
	s.RegisterService(&_TaoBlog_serviceDesc, srv)
}

func _TaoBlog_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoBlog_ListComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoBlogServer).ListComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocols.TaoBlog/ListComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoBlogServer).ListComments(ctx, req.(*ListCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaoBlog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocols.TaoBlog",
	HandlerType: (*TaoBlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Backup",
			Handler:    _TaoBlog_Backup_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _TaoBlog_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _TaoBlog_UpdateComment_Handler,
		},
		{
			MethodName: "ListComments",
			Handler:    _TaoBlog_ListComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols/service.proto",
}
